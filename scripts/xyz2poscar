#!/usr/bin/env python


# -------
# Imports
# -------

from argparse import ArgumentParser

import numpy as np

from spectroscopy.interfaces.misc import read_xyz
from spectroscopy.interfaces.vasp_interface import write_poscar

from spectroscopy.utilities import cartesian_to_fractional_coordinates


# ----
# Main
# ----

if __name__ == "__main__":
    # Parse command-line arguments.

    parser = ArgumentParser(
        "Convert an XYZ-format molecular structure to a VASP 5 POSCAR "
        "file")

    parser.add_argument(
        "XYZFile", metavar="<xyz_file>", type=str,
        help="XYZ-format file to convert")

    parser.add_argument(
        "-o", "--output",
        metavar="<poscar_file>", type=str, dest="POSCARFile",
        default="POSCAR.vasp", help="Output POSCAR file")

    parser.add_argument(
        "--padding",
        metavar="<box_padding>", type=float, dest="Padding", default=15.0,
        help="Padding between periodic images (default: 15 A)")

    parser.add_argument(
        "--cubic",
        action='store_true', dest="CubicBox", default=False,
        help="Generate a cubic box with at least --padding between "
             "periodic images")

    parser.add_argument(
        "--title",
        metavar="<title>", type=str, dest="TitleLine", default=None,
        help="Override the system (line 1) in the POSCAR file "
             "(default: title line from the XYZ file)")

    args = parser.parse_args()

    # Read XYZ file.

    title_line, atomic_symbols, atom_positions = read_xyz(args.XYZFile)

    # Find minimum and maximum x, y and z coordinates and work out the 
    # lattice vectors using the supplied padding.

    min_pos = np.min(atom_positions, axis=0)
    max_pos = np.max(atom_positions, axis=0)

    cell_lengths = None

    if args.CubicBox:
        cell_lengths = (np.ones((3, ), dtype = np.float64)
                   + ((max_pos - min_pos).max() + args.Padding))
    else:
        cell_lengths = (max_pos - min_pos) + args.Padding
    
    lattice_vectors = np.diag(cell_lengths)

    # Adjust positions to place the atom at the centre of the cell.

    trans = ((cell_lengths - (max_pos - min_pos)) / 2.0) - min_pos

    atom_positions = [pos + trans for pos in atom_positions]

    # Convert positions from cartesian to fractional coordinates.

    atom_positions = cartesian_to_fractional_coordinates(
        atom_positions, lattice_vectors)

    # Write output file.

    system_name = args.TitleLine if args.TitleLine is not None else title_line

    write_poscar(
        (lattice_vectors, atomic_symbols, atom_positions), args.POSCARFile,
        system_name=system_name)
